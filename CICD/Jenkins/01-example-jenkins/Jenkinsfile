pipeline {
    agent any
    
    environment {
        registry = "chzgustavo/node-app"
        registryCredential = 'docker_hub_login'
        dockerImage = ''
        tag = "v0.0.2"
    }

    stages {
        stage("Test app") {
            steps {
                echo 'test the app'
            }
        }

        stage ("Lint Dockerfile") {
            agent {
                docker {
                    image 'hadolint/hadolint:latest-debian'
                }
            }

            steps {
                sh 'hadolint Dockerfile | tee -a hadolint_lint.txt'
            }
            post {
                always {
                    archiveArtifacts 'hadolint_lint.txt'
                }
            }
        }

        stage("Build Docker Image") {
            steps {
                script {
                  dockerImage = docker.build registry + ":$tag"
                }  
            }
        }

        stage ("Container Vulnerability Scanner") {
            /*agent {
                docker {
                    image 'aquasec/trivy:latest'
                }
            }*/

            steps {
                sh 'docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ~/.cache:/root/.cache/ aquasec/trivy chzgustavo/node-app:v0.0.2 | tee -a trivy.txt'
            }
            post {
                always {
                    archiveArtifacts 'trivy.txt'
                }
            }
        }

        stage("Push docker image") {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        //dockerImage.push("${env.BUILD_NUMBER}")
                        dockerImage.push()
                    }
                }
            }
        }
 
        stage("Deploy in cluster") {
            //plugins kubernetes cli
            steps {
                echo 'deploy the app'
                withKubeConfig([credentialsId: 'kube-config-aws',//usar credenciales tipo file
                    caCertificate: '',
                    serverUrl: '',
                    contextName: '',
                    clusterName: '',
                    namespace: ''
                    ]) {
                sh 'kubectl apply --recursive -f namespaces/'
                }
            }
        }

        stage("delete image local") {
            
            steps {
                sh "docker rmi $registry:$tag"
            }
        }
    }


    post {
        // se ejeucta al ultimo de la tuberia
        always {
            // se ejecuta siempre independientemente si sale bien o mal 
            echo 'always'
        }
        success {
            // se ejecuta si es ok pipeline
                echo 'success'
        }
        failure {
            // se ejcuta si falla pipeline
            echo 'failure'
        }
    }
}
